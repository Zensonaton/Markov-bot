# coding: utf-8

import asyncio
from datetime import datetime
import json
import os
import random
import re
import time
from typing import cast

import aiofiles
import aiogram
import dateparser
import dotenv
import markovify
from aiogram import Dispatcher
from aiogram.types import Message as MessageType
from loguru import logger

from middleware import BotMessagesMiddleware

dotenv.load_dotenv()


BOT = aiogram.Bot(
	os.environ["TOKEN"],
	parse_mode=aiogram.types.ParseMode.HTML
)
DP = Dispatcher(BOT)

USER_BASE = {}

@DP.message_handler(commands=["start"])
async def hello_handler(msg: MessageType):
	# –ò–∑-–∑–∞ Middleware, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–∞—Ö.

	await msg.answer("–û—Ç–ª–∏—á–Ω–æ! üòä\n\n–ß—Ç–æ –±—ã —è —Ä–∞–±–æ—Ç–∞–ª, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. ü´Ç\n–ü–æ—Å–ª–µ –≤—ã–¥–∞—á–∏ —è —Å—É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –ø–æ–ª–æ–∂–µ–Ω–æ üëÄ")

@DP.chat_join_request_handler()
@DP.message_handler(content_types=["new_chat_members", "group_chat_created", "supergroup_chat_created"])
async def chat_join_handler(msg: MessageType):
	"""
	–í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –±–æ—Ç–∞ –¥–æ–±–∞–≤–ª—è—é—Ç –≤ —á–∞—Ç.
	"""

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω –±–æ—Ç –∏–ª–∏ –∫—Ç–æ-—Ç–æ –∏–Ω–æ–π?

	bot_id = (await BOT.get_me()).id
	if not any([i for i in msg.new_chat_members if i.id == bot_id]):
		return

	# –í –≥—Ä—É–ø–ø—É –¥–æ–±–∞–≤–∏–ª–∏ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–± —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:

	await msg.answer("<b>–ü—Ä–∏–≤–µ—Ç! üôã</b>\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ —á—Ç–æ –¥–æ–±–∞–≤–∏–ª –º–µ–Ω—è –∫ —Å–µ–±–µ –≤ –±–µ—Å–µ–¥—É.\n–î–ª—è –º–æ–µ–π —Ä–∞–±–æ—Ç—ã –≤—ã–¥–∞–π –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@DP.message_handler(commands=["stats", "statistics", "stat"])
async def stats_handler(msg: MessageType):
	"""
	–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
	"""

	await msg.answer(f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚ÑπÔ∏è</b>\n\n–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã —Ö—Ä–∞–Ω–∏—Ç—Å—è <code>{len(USER_BASE[str(msg.chat.id)]['Messages'])}</code> —Å–æ–æ–±—â–µ–Ω–∏–π.")

async def check_admin(msg: MessageType):
	"""
	–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç `False`, –µ—Å–ª–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç.
	"""

	if not (await BOT.get_chat_member(msg.chat.id, msg.from_user.id)).is_chat_admin():
		await msg.answer("‚ö†Ô∏è –î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ <b>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞</b>.")

		return False

	return True

@DP.message_handler(commands=["disable", "turn_off", "turnoff", "off"])
async def disable_handler(msg: MessageType):
	"""
	–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞.
	"""

	if not await check_admin(msg):
		return

	args = (msg.get_args() or "")
	disabled_seconds = 0 

	parsed = None
	if args:
		parsed = dateparser.parse(args)
	else:
		disabled_seconds = 7 * 24 * 60 * 60

	if parsed:
		disabled_seconds = (datetime.now().timestamp() - parsed.timestamp())

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–æ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –±–æ—Ç –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω:

	if disabled_seconds < 2 * 60:
		await msg.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π. –£–∫–∞–∑–∞–Ω–Ω–æ–µ —Ç–æ–±–æ—é –∑–Ω–∞—á–µ–Ω–∏–µ (<code>{seconds_to_userfriendly_string(disabled_seconds)}</code>) —É–∂ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ.\n\n–ü—Ä–∏–º–µ—Ä: <code>/disable 5 —á–∞—Å–æ–≤</code>")

		return

	await msg.answer(f"–û–∫–µ–π, —è –æ—Ç–∫–ª—é—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–π –±–µ—Å–µ–¥–µ –Ω–∞ <code>{seconds_to_userfriendly_string(disabled_seconds)}</code>.\n\n‚ÑπÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –º–µ–Ω—è –≤–∫–ª—é—á–∏—Ç—å, –ø—Ä–æ–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /enable.")
	update_record(
		msg.chat.id,
		{
			"OffUntil": int(time.time()) + int(disabled_seconds)
		}
	)

@DP.message_handler(commands=["enable", "turn_on", "turnon", "on"])
async def enable_handler(msg: MessageType):
	"""
	–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞.
	"""

	if not await check_admin(msg):
		return

	await msg.answer(
		"–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å —è —Å–Ω–æ–≤–∞ –º–æ–≥—É –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è! üôÇ"
		if USER_BASE[str(msg.chat.id)]["OffUntil"] else
		"–Ø –∏ —Ç–∞–∫ –≤–∫–ª—é—á—ë–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –±—ã–ª –æ—Ç–∫–ª—é—á—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –±–µ—Å–µ–¥—ã –¥–æ —ç—Ç–æ–≥–æ."
	)

	update_record(
		msg.chat.id,
		{
			"OffUntil": 0
		}
	)

async def onBotStart(dp: aiogram.Dispatcher) -> None:
	"""
	–ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
	"""

	global USER_BASE

	logger.info("–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!")

	# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:
	USER_BASE = await load_db()

async def bg_saver():
	"""
	–ó–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –≤—ã–≥—Ä—É–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã.
	"""

	while True:
		await asyncio.sleep(1)

		try:
			await save_db()
		except Exception as error:
			logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –≤ —Ñ–∞–π–ª: {error}")

def seconds_to_userfriendly_string(seconds, max=2, minutes=True, hours=True, days=True, weeks=False, months=False, years=False, decades=False):
	"""–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç UNIX-–≤—Ä–µ–º—è –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "5 —á–∞—Å–æ–≤, 17 —Å–µ–∫—É–Ω–¥".

	Args:
		seconds ([type]): [description]
		max (int, optional): [description]. Defaults to 2.
		minutes (bool, optional): [description]. Defaults to True.
		hours (bool, optional): [description]. Defaults to True.
		days (bool, optional): [description]. Defaults to True.
		weeks (bool, optional): [description]. Defaults to False.
		months (bool, optional): [description]. Defaults to False.
		years (bool, optional): [description]. Defaults to False.
		decades (bool, optional): [description]. Defaults to False.

	Returns:
		[type]: [description]
	"""

	seconds = int(seconds)

	if seconds < 0: seconds = -seconds
	newSeconds = seconds; string = []; values = [60, 3600, 86400, 604800, 2678400, 31536000, 315360000]; maxCount = max; valuesgot = {"decades": 0, "years": 0, "months": 0, "weeks": 0, "days": 0, "hours": 0, "minutes": 0, "seconds": 0}; stringslocal = [["–≤–µ–∫","–≤–µ–∫–∞","–≤–µ–∫–∞","–≤–µ–∫–∞","–≤–µ–∫–æ–≤"], ["–≥–æ–¥","–≥–æ–¥–∞","–≥–æ–¥–∞","–≥–æ–¥–∞","–ª–µ—Ç"],["–º–µ—Å—è—Ü","–º–µ—Å—è—Ü–∞","–º–µ—Å—è—Ü–∞","–º–µ—Å—è—Ü–∞","–º–µ—Å—è—Ü–µ–≤"],["–Ω–µ–¥–µ–ª—è","–Ω–µ–¥–µ–ª–∏","–Ω–µ–¥–µ–ª–∏","–Ω–µ–¥–µ–ª–µ–π"],["–¥–µ–Ω—å","–¥–Ω—è","–¥–Ω—è","–¥–Ω–µ–π"],["—á–∞—Å","—á–∞—Å–∞","—á–∞—Å–∞","—á–∞—Å–æ–≤"],["–º–∏–Ω—É—Ç–∞","–º–∏–Ω—É—Ç—ã","–º–∏–Ω—É—Ç—ã","–º–∏–Ω—É—Ç",],["—Å–µ–∫—É–Ω–¥–∞","—Å–µ–∫—É–Ω–¥—ã","—Å–µ–∫—É–Ω–¥—ã","—Å–µ–∫—É–Ω–¥"]]
	while True:
		if newSeconds >= values[6] and decades: newSeconds -= values[6]; valuesgot["decades"] += 1
		elif newSeconds >= values[5] and years: newSeconds -= values[5]; valuesgot["years"] += 1
		elif newSeconds >= values[4] and months: newSeconds -= values[4]; valuesgot["months"] += 1
		elif newSeconds >= values[3] and weeks: newSeconds -= values[3]; valuesgot["weeks"] += 1
		elif newSeconds >= values[2] and days: newSeconds -= values[2]; valuesgot["days"] += 1
		elif newSeconds >= values[1] and hours: newSeconds -= values[1]; valuesgot["hours"] += 1
		elif newSeconds >= values[0] and minutes: newSeconds -= values[0]; valuesgot["minutes"] += 1
		else: valuesgot["seconds"] += newSeconds; newSeconds = 0; break
	for index, key in enumerate(valuesgot):
		if valuesgot[key] != 0:
			if len(stringslocal[index]) > valuesgot[key]: string.append(str(valuesgot[key]) + " " + stringslocal[index][valuesgot[key] - 1])
			else: string.append(str(valuesgot[key]) + " " + stringslocal[index][len(stringslocal[index]) - 1])
	if len(string) == 0: string.append("0 —Å–µ–∫—É–Ω–¥")
	newStr = []
	for fstring in string:
		if maxCount > 0: newStr.append(fstring); maxCount -= 1
		else: break
	return ", ".join(newStr)

async def save_db(only_chat_id: int | str | None = None, folder = "db"):
	"""
	–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª—ã. –ï—Å–ª–∏ `only_chat_id` —É–∫–∞–∑–∞–Ω, —Ç–æ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ª–∏—à—å —É–∫–∞–∑–∞–Ω–Ω—ã–π ID –∏–∑ –ë–î –Ω–∞ –¥–∏—Å–∫.
	"""

	filenames_to_save = [str(only_chat_id)]
	if not only_chat_id:
		filenames_to_save = list(USER_BASE)

	for index, key in enumerate(filenames_to_save):
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ª–∏ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ:
		dict_to_save = USER_BASE[key].copy()

		# FIXME: –ö–æ—Å—Ç—ã–ª—å. –ú–Ω–µ –ª–µ–Ω—å –¥–µ–ª–∞—Ç—å —á—Ç–æ —Ç–æ –±–æ–ª–µ–µ —É–º–Ω–æ–µ.
		if dict_to_save["OffUntil"] <= int(time.time()):
			dict_to_save["OffUntil"] = 0
			USER_BASE[key]["OffUntil"] = 0

		if not dict_to_save["_isUpdated"]:
			continue

		dict_to_save.pop("_isUpdated")
		USER_BASE[key]["_isUpdated"] = False

		async with aiofiles.open(
			os.path.join(folder, key + ".jsonc"), 
			"w", encoding="utf-8"
		) as file:
			await file.write(
				json.dumps(
					dict_to_save,
					ensure_ascii=False
				)
			)

async def load_db(only_chat_id: int | str | None = None, folder="db"):
	"""
	–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ï—Å–ª–∏ `only_chat_id` —É–∫–∞–∑–∞–Ω, —Ç–æ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ —Ç–æ–ª—å–∫–æ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ë–î, –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ, –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â—ë–Ω dict –∏–∑ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –ë–î.
	"""

	dict_to_return = {}

	filenames_to_open = [str(only_chat_id)]
	if not only_chat_id:
		filenames_to_open = [os.path.splitext(i)[0] for i in os.listdir(folder)]

	filenames_to_open_with_path = [os.path.join(folder, i + ".jsonc") for i in filenames_to_open]

	for index, path in enumerate(filenames_to_open_with_path):
		async with aiofiles.open(path, "r", encoding="utf-8") as file:
			contents = await file.read()
			
			dict_to_return.update({
				filenames_to_open[index]: {
					**json.loads(contents),
					"_isUpdated": False
				}
			})

	return dict_to_return

def populate_base(chat_id: int | str):
	"""
	–î–æ–±–∞–≤–ª—è–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö "–ø—É—Å—Ç—É—é", "—á–∏—Å—Ç—É—é" –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤–æ–π –µ—â—ë –Ω–∏ —Ä–∞–∑—É –Ω–µ –±—ã–ª–æ.
	"""

	if str(chat_id) in USER_BASE:
		return

	USER_BASE.update({
		str(chat_id): {
			"_isUpdated": False,
			"ID": chat_id,
			"Messages": [],
			"Attachments": [],
			"OffUntil": 0
		}
	})

def update_record(chat_id: int | str, new_value: dict):
	"""
	–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ë–î.
	"""

	USER_BASE[str(chat_id)].update({
		**new_value,
		"_isUpdated": True
	})	

def add_database_message(chat_id: int | str, message_text: str):
	"""
	–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É.
	"""

	message_text = message_text.strip()

	if not message_text:
		return

	new_messages = USER_BASE[str(chat_id)]["Messages"]
	new_messages.append(message_text)

	update_record(
		chat_id,
		{
			"Messages": new_messages
		}
	)

@DP.message_handler()
async def message_handler(msg: MessageType):
	"""
	–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª—é–±–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä–æ–º–µ —Ç–µ—Ö, —á—Ç–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ.)
	"""

	# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
	message_text = msg.text or msg.caption

	add_database_message(
		msg.chat.id,
		message_text
	)

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è:
	if USER_BASE[str(msg.chat.id)]["OffUntil"] > int(time.time()) and USER_BASE[str(msg.chat.id)]["OffUntil"]:
		return

	# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
	# –î–ª—è –Ω–∞—á–∞–ª–∞ –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º—è–Ω—É–ª–∏ –ª–∏ –≥–¥–µ-—Ç–æ –±–æ—Ç–∞: –µ—Å–ª–∏ –¥–∞, —Ç–æ —à–∞–Ω—Å –ø–æ–≤—ã—Å–∏—Ç—Å—è.

	is_triggered = any([i for i in ["–º–∞–∫—Å", "max", "@maxzens_bot"] if i in message_text.lower()])

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞:
	if msg.reply_to_message and not is_triggered:
		is_triggered = msg.reply_to_message.from_user.id == BOT.id

	# –†–∞–Ω–¥–æ–º–Ω—ã–π —à–∞–Ω—Å.
	if random.randint(1, 100) > (80 if is_triggered else 8):
		return


	# –°–∞–º –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
	# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¶–µ–ø—å –ú–∞—Ä–∫–æ–≤–∞.

	# –°–æ–∑–¥–∞—ë–º –º–æ–¥–µ–ª—å —Ç–µ–∫—Å—Ç–∞.
	# TODO: –ï—Å—Ç—å –ª–∏ –∫–∞–∫–æ–π-—Ç–æ –º–µ—Ç–æ–¥ *–¥–æ–±–∞–≤–ª—è—Ç—å* –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –º–æ–¥–µ–ª—å, —á—Ç–æ –±—ã
	# –∫–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å –±–æ—Ç–∞, –∑–∞—Å—Ç–∞–≤–ª—è—è –µ–≥–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –æ–¥–Ω—É –∏ —Ç—É –∂–µ –º–æ–¥–µ–ª—å?
	model = markovify.NewlineText("\n".join(USER_BASE[str(msg.chat.id)]["Messages"]).lower())

	# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
	# –° —à–∞–Ω—Å–æ–º 33% –±—É–¥–µ—Ç "–¥–ª–∏–Ω–Ω–æ–µ" —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å —à–∞–Ω—Å–æ–º 66% - "–∫–æ—Ä–æ—Ç–∫–æ–µ" (<=50 —Å–∏–º–≤–æ–ª–æ–≤).
	msg_generated = model.make_sentence(tries=10) if (random.randint(0, 2) == 2) else model.make_short_sentence(50, tries=100)

	# –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å, —Ç–æ —Å —à–∞–Ω—Å–æ–º 50% –±–æ—Ç –ø–æ–ø—Ä–æ–±—É–µ—Ç –¥–æ—Å—Ç–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ
	# —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã.
	if not msg_generated and random.randint(0, 1):
		msg_generated = random.choice(USER_BASE[str(msg.chat.id)]["Messages"])

	if msg_generated:
		# –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ. –§–∏–ª—å—Ç—Ä—É–µ–º, —É–¥–∞–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è:
		msg_generated = re.sub(r"@(\w*)", "<i><a href=\"https://t.me/\\1\">@\\1</a></i>", msg_generated)

		# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ :)

		await asyncio.sleep(random.uniform(0, 1))

		await msg.bot.send_chat_action(msg.chat.id, "typing")
		await asyncio.sleep(random.uniform(1, 3))

		# –° —à–∞–Ω—Å–æ–º 50% –±—É–¥–µ—Ç reply, —Å —à–∞–Ω—Å–æ–º 50% - –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
		if random.randint(0, 1):
			await msg.answer(msg_generated, disable_notification=True, allow_sending_without_reply=True, disable_web_page_preview=True)
		else:
			await msg.reply(msg_generated, disable_notification=True, allow_sending_without_reply=True, disable_web_page_preview=True)


if __name__ == "__main__":
	loop = asyncio.new_event_loop()
	asyncio.set_event_loop(loop)

	# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –±—É–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:
	os.makedirs("db", exist_ok=True)

	# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Middlware:
	DP.middleware.setup(
		BotMessagesMiddleware(populate_base)
	)

	# –°–æ–∑–¥–∞—ë–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã:
	loop.create_task(bg_saver())

	# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞:
	aiogram.utils.executor.start_polling(
		dispatcher=DP,
		on_startup=onBotStart,
		skip_updates=True,
		loop=loop,
	)
